---
# Configure The Bastion system

- name: configure | Run bastion installation script (new install)
  ansible.builtin.command:
    cmd: "{{ bastion_install_dir }}/bin/admin/install --new-install"
    creates: "{{ bastion_version }}"
  when: bastion_effective_install_mode == "new"
  register: bastion_install_new_result
  tags: bastion_install_new

- name: configure | Run bastion installation script (upgrade)
  ansible.builtin.command:
    cmd: "{{ bastion_install_dir }}/bin/admin/install {{ '--managed-upgrade' if bastion_upgrade_use_managed else '--upgrade' }}"
    creates: "{{ bastion_version }}"
  when: bastion_effective_install_mode == "upgrade"
  register: bastion_install_upgade_result
  tags: bastion_install_upgrade

- name: configure | Create version file (new installation)
  ansible.builtin.copy:
    content: "{{ bastion_version }}"
    dest: /etc/bastion/version
    mode: "0644"
  when:
    - bastion_effective_install_mode == "new"
    - bastion_install_new_result is succeeded
    - bastion_install_new_result.changed
  tags:
    - bastion_install_new

- name: configure | Create version file (upgrade)
  ansible.builtin.copy:
    content: "{{ bastion_version }}"
    dest: /etc/bastion/version
    mode: "0644"
  when:
    - bastion_effective_install_mode == "upgrade"
    - bastion_install_upgade_result is succeeded
    - bastion_install_upgade_result.changed
  tags:
    - bastion_install_upgrade

- name: configure | Check that bastion.conf exists
  ansible.builtin.stat:
    path: /etc/bastion/bastion.conf
  register: bastion_conf_stat
  tags: bastion_check_config

- name: configure | Fail if bastion.conf doesn't exist
  ansible.builtin.fail:
    msg: "Bastion configuration file /etc/bastion/bastion.conf was not created"
  when: not bastion_conf_stat.stat.exists
  tags: bastion_check_config

- name: configure | Generate bastion configuration from template
  ansible.builtin.template:
    src: bastion.conf.j2
    dest: /etc/bastion/bastion.conf
    backup: true
    mode: "0644"
  when: bastion_config is defined
  notify: restart sshd
  tags: bastion_apply_config
  diff: true

- name: configure | Generate ACL backup configuration from template
  ansible.builtin.template:
    src: osh-backup-acl-keys.conf.j2
    dest: /etc/bastion/osh-backup-acl-keys.conf
    backup: true
    mode: "0600"
    owner: root
    group: root
  tags: bastion_acl_backup_config
  diff: true

- name: configure | Generate encrypt-rsync configuration from template
  ansible.builtin.template:
    src: osh-encrypt-rsync.conf.j2
    dest: /etc/bastion/osh-encrypt-rsync.conf
    backup: true
    mode: "0600"
    owner: root
    group: root
  when: bastion_encrypt_rsync_enabled | default(true)
  tags: bastion_encrypt_rsync_config
  diff: true

- name: configure | Create bastion backup directory
  ansible.builtin.file:
    path: "{{ bastion_acl_backup_destdir }}"
    state: directory
    mode: "0700"
    owner: root
    group: root
  when: bastion_acl_backup_destdir | length > 0
  tags: bastion_acl_backup_dir

- name: configure | Create encrypt-rsync directory
  ansible.builtin.file:
    path: "{{ bastion_encrypt_rsync_encrypt_dir }}"
    state: directory
    mode: "0700"
    owner: root
    group: root
  when:
    - bastion_encrypt_rsync_enabled | default(true)
    - bastion_encrypt_rsync_encrypt_dir | length > 0
  tags: bastion_encrypt_rsync_dir

- name: configure | Configure plugins that require MFA
  ansible.builtin.copy:
    src: plugin.mfa.conf
    dest: /etc/bastion/plugin.{{ item.name }}.conf
    owner: root
    group: root
    mode: "0644"
  loop: "{{ bastion_plugin_mfa_config }}"
  when:
    - bastion_plugin_mfa_config | length > 0
    - item.mfa | default(true)
  tags: bastion_mfa_plugins

- name: configure | Remove existing plugin MFA config files if no longer needed
  ansible.builtin.file:
    path: /etc/bastion/plugin.{{ item.name }}.conf
    state: absent
  loop: "{{ bastion_plugin_mfa_config }}"
  when:
    - bastion_plugin_mfa_config | length > 0
    - not item.mfa | default(true)
  tags: bastion_mfa_plugins

- name: configure | Ensure SSH service is enabled and started
  ansible.builtin.systemd:
    name: ssh
    enabled: true
    state: started
  tags: bastion_ssh_service
